{"version":3,"sources":["logo.svg","ListItem.js","ListView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItem","props","ratingStr","userRating","className","storeName","ListView","stores","sort","a","b","map","store","name","App","Boolean","window","location","hostname","match","renderReactDom","ReactDOM","render","StrictMode","document","getElementById","cordova","addEventListener","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qLAAAA,EAAOC,QAAU,IAA0B,kC,kICqB5BC,MAlBf,SAAkBC,GAChB,IAAIC,EAAY,GAChB,OAAQD,EAAME,YACZ,KAAK,EAAGD,EAAY,UAAW,MAC/B,KAAK,EAAGA,EAAY,SAAU,MAC9B,KAAK,EAAGA,EAAY,SAAU,MAC9B,KAAK,EAAGA,EAAY,SAAU,MAC9B,KAAK,EAAGA,EAAY,SAAU,MAC9B,QAASA,EAAY,UAEvB,OACE,0BAAME,UAAU,YACd,yBAAKA,UAAU,iBAAiBH,EAAMI,WACtC,yBAAKD,UAAW,2CAA6CF,GAAYA,KCDhEI,MAZf,SAAkBL,GAChB,OACE,yBAAKG,UAAU,YAEXH,EAAMM,OACHC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEP,WAAWM,EAAEN,cAC9BQ,KAAI,SAACC,GAAD,OAAW,kBAAC,EAAD,CAAUP,UAAWO,EAAMC,KAAMV,WAAYS,EAAMT,kBC+B9DW,MAnCf,WAuBE,OACE,yBAAKV,UAAU,OACb,gCACE,sCAIF,kBAAC,EAAD,CAAUG,OA7BC,CACb,CACE,KAAQ,UACR,WAAc,GAEhB,CACE,KAAQ,SACR,WAAc,GAEhB,CACE,KAAQ,SACR,WAAc,GAEhB,CACE,KAAQ,aACR,WAAc,GAEhB,CACE,KAAQ,QACR,WAAc,QCbAQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAiB,kBAAMC,IAASC,OAAO,kBAAC,IAAMC,WAAP,KAAkB,kBAAC,EAAD,OAA2BC,SAASC,eAAe,UAE9GT,OAAOU,QACTF,SAASG,iBAAiB,eAAe,WACvCP,OACC,GAEHA,IDsHI,kBAAmBQ,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cbb08048.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.128f7fdb.svg\";","import React from 'react';\nimport './ListItem.css';\n\nfunction ListItem(props) {\n  let ratingStr = \"\";\n  switch (props.userRating) {\n    case 0: ratingStr = \"Squishy\"; break;\n    case 1: ratingStr = \"Packed\"; break;\n    case 2: ratingStr = \"Normal\"; break;\n    case 3: ratingStr = \"Sparse\"; break;\n    case 4: ratingStr = \"Lonely\"; break;\n    default: ratingStr = \"Unknown\"; break;\n  }\n  return (\n    <span className=\"ListItem\">\n      <div className=\"ListItem-name\">{props.storeName}</div>\n      <div className={\"ListItem-ratingUser ListItem-ratingUser_\" + ratingStr}>{ratingStr}</div>\n    </span>\n  );\n}\n\nexport default ListItem;\n","import React from 'react';\nimport ListItem from './ListItem';\n\nfunction ListView(props) {\n  return (\n    <div className=\"ListView\">\n      {\n        props.stores\n          .sort((a, b) => b.userRating-a.userRating)\n          .map((store) => <ListItem storeName={store.name} userRating={store.userRating} />)\n      }\n    </div>\n  );\n}\n\nexport default ListView;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListView from './ListView';\n\nfunction App() {\n  const stores = [\n    {\n      \"name\": \"Safeway\",\n      \"userRating\": 4\n    },\n    {\n      \"name\": \"Costco\",\n      \"userRating\": 0\n    },\n    {\n      \"name\": \"Sobeys\",\n      \"userRating\": 3\n    },\n    {\n      \"name\": \"Superstore\",\n      \"userRating\": 1\n    },\n    {\n      \"name\": \"Co-op\",\n      \"userRating\": 2\n    },\n  ]\n  return (\n    <div className=\"App\">\n      <header>\n        <p>\n          Header\n        </p>\n      </header>\n      <ListView stores={stores} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst renderReactDom = () => ReactDOM.render(<React.StrictMode><App /></React.StrictMode>,document.getElementById('root'));\n\nif (window.cordova) {\n  document.addEventListener('deviceready', () => {\n    renderReactDom();\n  }, false);\n} else {\n  renderReactDom();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}